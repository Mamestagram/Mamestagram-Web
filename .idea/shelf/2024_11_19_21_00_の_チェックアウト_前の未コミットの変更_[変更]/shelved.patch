Index: scripts/modules/sakuramail.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const sakuraMail = process.env.SAKURA_MAIL;\r\nconst nodemailer = require(\"nodemailer\");\r\nconst transporter = nodemailer.createTransport({\r\n    host: sakuraMail,\r\n    port: 587,\r\n    secure: true,\r\n    requireTLS: false\r\n});\r\nmodule.exports = transporter;
===================================================================
diff --git a/scripts/modules/sakuramail.js b/scripts/modules/sakuramail.js
--- a/scripts/modules/sakuramail.js	(revision 0f158f2c63937d22a632f3e45d003a7f382d7acb)
+++ b/scripts/modules/sakuramail.js	(date 1732015922936)
@@ -1,4 +1,4 @@
-const sakuraMail = process.env.SAKURA_MAIL;
+const baseDomain = process.env.BASE_DOMAIN, sakuraMail = process.env.SAKURA_MAIL;
 const nodemailer = require("nodemailer");
 const transporter = nodemailer.createTransport({
     host: sakuraMail,
@@ -6,4 +6,30 @@
     secure: true,
     requireTLS: false
 });
-module.exports = transporter;
\ No newline at end of file
+const contents = (name, code, key, lang) => {
+    const text = {
+        en: `Hello${name !== null ? `, ${name}` : ""}!
+        Thank you for playing on Mamestagram!
+                    
+        An action performed requires verification.
+                    
+        Your Verification code is: ${code}
+        Use this to authenticate your account.                    
+                    
+        Alternatively, you can also visit this link below to finish verification:
+                    
+        https://web.${baseDomain}/verify?key=${key}
+                    
+        If you did not request this, please REPLY TO ADMINISTRATORS IMMEDIATELY as your account may be in danger.
+                    
+        --------------------------------------
+        Mamestagram : https://web.${baseDomain}
+        --------------------------------------`,
+        ja: `
+        `
+    }
+}
+module.exports = {
+    transporter,
+    contents,
+};
\ No newline at end of file
Index: scripts/account/verify.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const baseDomain = process.env.BASE_DOMAIN, sakuraMail = process.env.SAKURA_MAIL;\r\nconst modules = require(\"../modules\");\r\nconst mysql = require(\"../modules/mysql\");\r\n\r\nconst verify = () => {\r\n    const pageName = \"Verification\", subDomain = \"verify\";\r\n    const from = `support@${sakuraMail}`, subject = \"Mamestagram account verification\";\r\n    let email, errLi, mailOptions, name, to, code, key, time, user;\r\n\r\n    modules.app.post(\"/verify\",\r\n        (req, res, next) => {\r\n            if (req.query.key === undefined) {\r\n                if (!res.locals.isLoggedIn) {\r\n                    email = req.body.email;\r\n                    errLi = { username: [], email: [], password: [], hf: false, bot: false };\r\n                    const connectMysql = () => {\r\n                        mysql.pool.getConnection((err, connection) => {\r\n                            if (err) {\r\n                                console.error(err);\r\n                                setTimeout(connectMysql, 100);\r\n                            }\r\n                            else {\r\n                                const process = async () => {\r\n                                    try {\r\n                                        user = await mysql.query(\r\n                                            connection,\r\n                                            `\r\n                                                SELECT name\r\n                                                FROM users\r\n                                                WHERE email = ?;\r\n                                            `,\r\n                                            [email]\r\n                                        );\r\n                                        if (user.length > 0) {\r\n                                            name = user[0].name;\r\n                                            to = email;\r\n                                        }\r\n                                        else {\r\n                                            errLi.email.push(\"Does not exist\");\r\n                                            res.render(`${res.locals.language}/account.js`, {\r\n                                                    type: \"verify\",\r\n                                                    errLi,\r\n                                                    name: null,\r\n                                                    email,\r\n                                                    password: null\r\n                                                },\r\n                                                (error, ejs) => {\r\n                                                    if (error) {\r\n                                                        modules.utils.writeError(req, res, modules.utils.getErrorContent(pageName, error), subDomain);\r\n                                                    }\r\n                                                    else {\r\n                                                        res.send(ejs);\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    catch (error) {\r\n                                        modules.utils.writeError(req, res, modules.utils.getErrorContent(pageName, error), subDomain);\r\n                                    }\r\n                                    finally {\r\n                                        connection.release();\r\n                                        next();\r\n                                    }\r\n                                }\r\n                                process();\r\n                            }\r\n                        });\r\n                    }\r\n                    connectMysql();\r\n                }\r\n                else {\r\n                    const connectMysql = () => {\r\n                        mysql.pool.getConnection((err, connection) => {\r\n                            if (err) {\r\n                                console.error(err);\r\n                                setTimeout(connectMysql, 100);\r\n                            }\r\n                            else {\r\n                                const process = async () => {\r\n                                    try {\r\n                                        user = await mysql.query(\r\n                                            connection,\r\n                                            `\r\n                                            SELECT email\r\n                                            FROM users\r\n                                            WHERE id = ?;\r\n                                        `,\r\n                                            [res.locals.userid]\r\n                                        );\r\n                                        name = res.locals.username;\r\n                                        to = user[0].email;\r\n                                    }\r\n                                    catch (error) {\r\n                                        modules.utils.writeError(req, res, modules.utils.getErrorContent(pageName, error), subDomain);\r\n                                    }\r\n                                    finally {\r\n                                        connection.release();\r\n                                        next();\r\n                                    }\r\n                                }\r\n                                process();\r\n                            }\r\n                        });\r\n                    }\r\n                    connectMysql();\r\n                }\r\n            }\r\n            else {\r\n                next();\r\n            }\r\n        },\r\n        (req, res, next) => {\r\n            if (req.query.key === undefined) {\r\n                code = Math.random().toString(36).substring(2); // 認証コード\r\n                key = modules.crypto.createHash(\"md5\").update(code).digest(\"hex\"); // 認証キー\r\n                mailOptions = {\r\n                    from,\r\n                    to,\r\n                    subject,\r\n                    text: `Hello\r\n                    Thank you for playing on Mamestagram!\r\n                    \r\n                    An action performed requires verification.\r\n                    \r\n                    Your Verification code is: ${code}\r\n                    Use this to authenticate your account.                    \r\n                    \r\n                    Alternatively, you can also visit this link below to finish verification:\r\n                    \r\n                    https://web.${baseDomain}/verify?key=${key}\r\n                    \r\n                    If you did not request this, please REPLY TO ADMINISTRATORS IMMEDIATELY as your account may be in danger.\r\n                    \r\n                    --------------------------------------\r\n                    Mamestagram : https://web.${baseDomain}\r\n                    --------------------------------------`\r\n                };\r\n                const process = async () => {\r\n                    try {\r\n                        const sendResult = await sakuraMail.sendMail(mailOptions);\r\n                        if (sendResult.flag) {\r\n\r\n                        }\r\n                        else {\r\n\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        modules.utils.writeError(req, res, modules.utils.getErrorContent(pageName, error), subDomain);\r\n                    }\r\n                }\r\n                process();\r\n            }\r\n            else {\r\n                next();\r\n            }\r\n        },\r\n        (req, res) => {\r\n\r\n        }\r\n    );\r\n}\r\nmodule.exports = verify;
===================================================================
diff --git a/scripts/account/verify.js b/scripts/account/verify.js
--- a/scripts/account/verify.js	(revision 0f158f2c63937d22a632f3e45d003a7f382d7acb)
+++ b/scripts/account/verify.js	(date 1732015922946)
@@ -1,4 +1,4 @@
-const baseDomain = process.env.BASE_DOMAIN, sakuraMail = process.env.SAKURA_MAIL;
+const sakuraMail = process.env.SAKURA_MAIL;
 const modules = require("../modules");
 const mysql = require("../modules/mysql");
 
@@ -31,29 +31,8 @@
                                             `,
                                             [email]
                                         );
-                                        if (user.length > 0) {
-                                            name = user[0].name;
-                                            to = email;
-                                        }
-                                        else {
-                                            errLi.email.push("Does not exist");
-                                            res.render(`${res.locals.language}/account.js`, {
-                                                    type: "verify",
-                                                    errLi,
-                                                    name: null,
-                                                    email,
-                                                    password: null
-                                                },
-                                                (error, ejs) => {
-                                                    if (error) {
-                                                        modules.utils.writeError(req, res, modules.utils.getErrorContent(pageName, error), subDomain);
-                                                    }
-                                                    else {
-                                                        res.send(ejs);
-                                                    }
-                                                }
-                                            );
-                                        }
+                                        name = user.length > 0 ? user[0].name : null;
+                                        to = email;
                                     }
                                     catch (error) {
                                         modules.utils.writeError(req, res, modules.utils.getErrorContent(pageName, error), subDomain);
@@ -118,32 +97,43 @@
                     from,
                     to,
                     subject,
-                    text: `Hello
-                    Thank you for playing on Mamestagram!
-                    
-                    An action performed requires verification.
-                    
-                    Your Verification code is: ${code}
-                    Use this to authenticate your account.                    
-                    
-                    Alternatively, you can also visit this link below to finish verification:
-                    
-                    https://web.${baseDomain}/verify?key=${key}
-                    
-                    If you did not request this, please REPLY TO ADMINISTRATORS IMMEDIATELY as your account may be in danger.
-                    
-                    --------------------------------------
-                    Mamestagram : https://web.${baseDomain}
-                    --------------------------------------`
+                    text:
                 };
                 const process = async () => {
                     try {
+                        req.session.code = code;
+                        req.session.key = key;
+                        time = 0;
+                        const timer = setInterval(() => {
+                            if (++time >= 5 * 60) {
+                                delete req.session.code;
+                                delete req.session.key;
+                                time = 0;
+                                clearInterval(timer);
+                            }
+                        }, 1000);
                         const sendResult = await sakuraMail.sendMail(mailOptions);
                         if (sendResult.flag) {
-
+                            res.redirect(`${res.locals.language}/accounts?class=code`);
                         }
                         else {
-
+                            errLi.email.push("Transmission failed");
+                            res.render(`${res.locals.language}/account.js`, {
+                                    type: "verify",
+                                    errLi,
+                                    name: null,
+                                    email,
+                                    password: null
+                                },
+                                (error, ejs) => {
+                                    if (error) {
+                                        modules.utils.writeError(req, res, modules.utils.getErrorContent(pageName, error), subDomain);
+                                    }
+                                    else {
+                                        res.send(ejs);
+                                    }
+                                }
+                            );
                         }
                     }
                     catch (error) {
